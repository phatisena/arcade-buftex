{"entries":[{"timestamp":1744858613447,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":131,"diffs":[[1,"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <variables></variables>\n  <block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block>\n</xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":443,"diffs":[[1," "]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":216,"length1":31,"diffs":[[1,"    \"additionalFilePaths\": []\n"]]}]}]},{"timestamp":1744859211913,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":25,"length1":43,"diffs":[[1,"    export function encode(txt: string) {\n"]]},{"start1":102,"length1":35,"diffs":[[1,""]]},{"start1":123,"length1":194,"diffs":[[1,"        for (let i = 0;i < txt.length;i++) {\n            numv = txt.charCodeAt(i)\n            const byte\n"]]},{"start1":274,"length1":44,"diffs":[[1,"                numarrv.push(numv % 256)\n"]]},{"start1":375,"length1":13,"diffs":[[1,""]]},{"start1":442,"length1":451,"diffs":[[1,""]]}]}]},{"timestamp":1744859810786,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":503,"length1":51,"diffs":[[1,"            \n"]]},{"start1":627,"length1":32,"diffs":[[1,"        let numarrv: number[] = []\n        let strarrv: string[] = []\n"]]},{"start1":830,"length1":184,"diffs":[[1,"                if (bytesum > 0) {\n                    byteval = bufv[0]\n                }\n"]]},{"start1":1004,"length1":83,"diffs":[[1,""]]},{"start1":1028,"length1":22,"diffs":[[1,""]]},{"start1":1034,"length1":105,"diffs":[[1,"}"]]}]}]},{"timestamp":1744860407855,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":103,"length1":0,"diffs":[[1,"        let numsubv: number[] = []\n"]]},{"start1":243,"length1":56,"diffs":[[1,"            const bytelen = Math.floor(numv / 256)\n"]]},{"start1":328,"length1":0,"diffs":[[1,"            numsubv = []\n"]]},{"start1":399,"length1":85,"diffs":[[1,"                numsubv.unshift(numv % 256)\n                numv = Math.floor(numv / 256)\n"]]},{"start1":503,"length1":0,"diffs":[[1,"            for (let v of numsubv) numarrv.push(v)\n"]]},{"start1":932,"length1":54,"diffs":[[1,"                bytesum = (bytesum > 0)?bytesum*256:256\n"]]},{"start1":1235,"length1":115,"diffs":[[1,"let valbuf = databuffer.encode(\"hello world\")\nconsole.log(null)\nlet valtxt = databuffer.decode(valbuf)"]]}]}]},{"timestamp":1744861045190,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1091,"length1":9,"diffs":[[1,""]]}]}]},{"timestamp":1744861052785,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":208,"length1":50,"diffs":[[1,"            const bytelen = Math.floor((numv / 16) / 2)\n"]]},{"start1":344,"length1":87,"diffs":[[1,"                numarrv.push(numv % 16)\n                numv = Math.floor(numv / 16)\n"]]},{"start1":821,"length1":56,"diffs":[[1,"                bytesum = (bytesum > 0)?bytesum*16:16\n"]]},{"start1":1091,"length1":47,"diffs":[[1,"        \n"]]},{"start1":1131,"length1":37,"diffs":[[1,"let valbuf = databuffer.encode(\"hi\")\n"]]}]}]},{"timestamp":1744861707581,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":208,"length1":47,"diffs":[[1,"            const bytelen = Math.ceil(numv / 256)\n"]]}]}]},{"timestamp":1744861748586,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":124,"length1":21,"diffs":[[1,""]]},{"start1":208,"length1":54,"diffs":[[1,"            const bytelen = Math.ceil(numv / )\n"]]},{"start1":436,"length1":21,"diffs":[[1,""]]}]}]},{"timestamp":1744862478723,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":495,"length1":9,"diffs":[[1,""]]}]}]},{"timestamp":1744862504637,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":229,"length1":64,"diffs":[[1,"            const bytelen = Math.ceil(numv / 256 / 8)\n"]]},{"start1":495,"length1":24,"diffs":[[1,"        \n"]]},{"start1":1144,"length1":0,"diffs":[[1,"        strtxt += String.fromCharCode(byteval)\n"]]},{"start1":1222,"length1":37,"diffs":[[1,"let valbuf = databuffer.encode(\"กบ\")\n"]]}]}]},{"timestamp":1744863241716,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":474,"length1":0,"diffs":[[1,"            lenv = 1\n"]]}]}]},{"timestamp":1744863253708,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":103,"length1":0,"diffs":[[1,"        let numv = 0\n        let lenv = 1\n"]]},{"start1":191,"length1":42,"diffs":[[1,"            numv = txtv.charCodeAt(i)\n"]]},{"start1":1179,"length1":47,"diffs":[[1,"let valbuf = databuffer.encode(\"hi\")\n"]]},{"start1":1275,"length1":231,"diffs":[[1,"console.log(valtxt)"]]}]}]},{"timestamp":1744863807472,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1,"length1":1,"diffs":[[1,""]]}]}]},{"timestamp":1744864485700,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1,"length1":3,"diffs":[[1,"\n"]]}]}]},{"timestamp":1744864486858,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1,"length1":53,"diffs":[[1,"//\nnamespace databuffer {\n"]]},{"start1":28,"length1":207,"diffs":[[1,""]]},{"start1":531,"length1":170,"diffs":[[1,""]]}]}]},{"timestamp":1744865085699,"editorVersion":"2.0.48","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":84,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":105,"length1":92,"diffs":[[1,"     * @param text input to convert\n"]]},{"start1":815,"length1":93,"diffs":[[1,""]]},{"start1":1547,"length1":0,"diffs":[[1,"\nlet valbuf = databuffer.encode(\"hello world!\")\nconsole.log(valbuf)\nlet valtxt = databuffer.decode(valbuf)\nconsole.log(valtxt)\n\ncontroller.A.onEvent(ControllerButtonEvent.Pressed, function() {\n    let valbuf = databuffer.encode(\"hello world!\")\n    console.log(valbuf)\n    let valtxt = databuffer.decode(valbuf)\n    console.log(valtxt)\n\n})"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":2,"length1":91,"diffs":[[1,"    \"name\": \"arcade-databuffer\",\n    \"description\": \"\",\n"]]},{"start1":216,"length1":44,"diffs":[[1,""]]}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1744858613446,"editorVersion":"2.0.48","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <variables></variables>\n  <block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block>\n</xml>","main.ts":" ","README.md":" ","assets.json":"","pxt.json":"{\n    \"name\": \"arcade-databuffer\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1744860413630,"editorVersion":"2.0.48","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>","main.ts":"\nnamespace databuffer {\n\n    export function encode(txtv: string) {\n        let numarrv: number[] = []\n        let numsubv: number[] = []\n        let numv = 0\n        for (let i = 0;i < txtv.length;i++) {\n            numv = txtv.charCodeAt(i)\n            const bytelen = Math.floor(numv / 256)\n            numarrv.push(bytelen)\n            numsubv = []\n            for (let j = 0;j < bytelen;j++) {\n                numsubv.unshift(numv % 256)\n                numv = Math.floor(numv / 256)\n            }\n            for (let v of numsubv) numarrv.push(v)\n        }\n        return pins.createBufferFromArray(numarrv)\n    }\n\n    export function decode(bufv: Buffer) {\n        let strtxt: string = \"\"\n        let bytelen = bufv[0], bytesum = 0, byteval = 0\n        for (let i = 1;i < bufv.length;i++) {\n            if (bytelen > 0) {\n                if (bytesum > 0) byteval += bufv[i] * bytesum\n                else byteval += bufv[i]\n                bytesum = (bytesum > 0)?bytesum*256:256\n                bytelen--\n            } else {\n                bytelen = bufv[i]\n                bytesum = 0\n                strtxt += String.fromCharCode(byteval)\n                byteval = 0\n            }\n        }\n        return strtxt\n    }\n}\n\nlet valbuf = databuffer.encode(\"hello world\")\nconsole.log(val)\nlet valtxt = databuffer.decode(valbuf)","README.md":" ","assets.json":"","pxt.json":"{\n    \"name\": \"arcade-databuffer\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1744862221193,"editorVersion":"2.0.48","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>","main.ts":"\nnamespace databuffer {\n\n    export function encode(txtv: string) {\n        let numarrv: number[] = []\n        let numv = 0\n        let lenv = 1\n        for (let i = 0;i < txtv.length;i++) {\n            numv = txtv.charCodeAt(i)\n            const bytelen = Math.ceil(numv / 256 / 8)\n            numarrv.push(bytelen)\n            for (let j = 0;j < bytelen;j++) {\n                numarrv.push(numv % 256)\n                numv = Math.floor(numv / 256)\n            }\n            lenv = 1\n        }\n        return pins.createBufferFromArray(numarrv)\n    }\n\n    export function decode(bufv: Buffer) {\n        let strtxt: string = \"\"\n        let bytelen = bufv[0], bytesum = 0, byteval = 0\n        for (let i = 1;i < bufv.length;i++) {\n            if (bytelen > 0) {\n                if (bytesum > 0) byteval += bufv[i] * bytesum\n                else byteval += bufv[i]\n                bytesum = (bytesum > 0)?bytesum*256:256\n                bytelen--\n            } else {\n                bytelen = bufv[i]\n                bytesum = 0\n                strtxt += String.fromCharCode(byteval)\n                byteval = 0\n            }\n        }\n        strtxt += String.fromCharCode(byteval)\n        return strtxt\n    }\n}\n\nlet valbuf = databuffer.encode(\"กบ\")\nconsole.log(valbuf)\nlet valtxt = databuffer.decode(valbuf)\nconsole.log(valtxt)","README.md":" ","assets.json":"","pxt.json":"{\n    \"name\": \"arcade-databuffer\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1744864485700,"editorVersion":"2.0.48","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>","main.ts":"\nnamespace databuffer {\n\n    export function encode(txtv: string) {\n        let numarrv: number[] = []\n        for (let i = 0;i < txtv.length;i++) {\n            let numv = txtv.charCodeAt(i)\n            const bytelen = Math.ceil(Math.log(numv+1 * 2) / 8)\n            numarrv.push(bytelen)\n            for (let j = 0;j < bytelen;j++) {\n                numarrv.push(numv % 256)\n                numv = Math.floor(numv / 256)\n            }\n        }\n        numarrv.push(0)\n        return pins.createBufferFromArray(numarrv)\n    }\n\n    export function decode(bufv: Buffer) {\n        let strtxt: string = \"\"\n        let bytelen = bufv[0], bytesum = 0, byteval = 0\n        for (let i = 1;i < bufv.length;i++) {\n            if (bytelen > 0) {\n                if (bytesum > 0) byteval += bufv[i] * bytesum\n                else byteval += bufv[i]\n                bytesum = (bytesum > 0)?bytesum*256:256\n                bytelen--\n            } else {\n                bytelen = bufv[i]\n                bytesum = 0\n                strtxt += String.fromCharCode(byteval)\n                byteval = 0\n            }\n        }\n        return strtxt\n    }\n}\n\nlet valbuf = databuffer.encode(\"hello world!\")\nconsole.log(valbuf)\nlet valtxt = databuffer.decode(valbuf)\nconsole.log(valtxt)\n\ncontroller.A.onEvent(ControllerButtonEvent.Pressed, function() {\n    let valbuf = databuffer.encode(\"hello world!\")\n    console.log(valbuf)\n    let valtxt = databuffer.decode(valbuf)\n    console.log(valtxt)\n\n})","README.md":" ","assets.json":"","pxt.json":"{\n    \"name\": \"arcade-databuffer\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[{"id":"02485-42330-30828-56106","timestamp":1744863808714}],"lastSaveTime":1744865313998}